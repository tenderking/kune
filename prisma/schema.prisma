generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Services {
  id               String              @id @default(cuid())
  name             String              @unique
  description      String              @default("")
  category_id      String
  website_url      String
  image_url        String
  phone_number     String              @default("")
  address          String              @default("")
  service_owner_id String?
  created_at       DateTime?           @default(now()) @db.Timestamp(6)
  updated_at       DateTime            @default(now()) @db.Timestamp(6)
  category         Categories          @relation(fields: [category_id], references: [id]) // Many-to-One relationship with Categories model
  service_owner    User?               @relation(fields: [service_owner_id], references: [id]) // One-to-One relationship with User model
  offers           Offers[] // One-to-Many relationship with Offers model
  favorited_by     Favorite_Services[] // One-to-Many relationship with Favorite_Services model
  service_tags     ServiceTags[] // Many-to-Many relationship with ServiceTags model

  @@index([category_id], map: "Services_category_id_fkey")
  @@index([service_owner_id], map: "Services_service_owner_id_fkey")
}

model Categories {
  id       String     @id @default(cuid())
  name     String     @unique
  services Services[] // One-to-Many relationship with Services model
}

model Tags {
  id       String                @id @default(cuid())
  name     String                @unique
  services ServiceTags[]
  creators ContentCreatorsTags[]
}

// This model represents the junction table between services and tags.
// It has relationships with the Tags, Services, and ContentCreators models.
model ServiceTags {
  tags_id     String
  services_id String
  service     Services @relation(fields: [services_id], references: [id]) // One-to-One relationship with Services model
  tags        Tags     @relation(fields: [tags_id], references: [id]) // One-to-One relationship with Tags model

  @@id([tags_id, services_id])
}

model ContentCreatorsTags {
  tags_id     String
  creators_id String
  tags        Tags            @relation(fields: [tags_id], references: [id]) // One-to-One relationship with Tags model
  creators    ContentCreators @relation(fields: [creators_id], references: [id]) // One-to-One relationship with ContentCreators model

  @@id([tags_id, creators_id])
}

model Favorite_Services {
  user_id           String
  service_id        String
  created_at        DateTime? @default(now()) @db.Timestamp(6)
  updated_at        DateTime  @default(now()) @db.Timestamp(6)
  favorited_service Services  @relation(fields: [service_id], references: [id]) // One-to-One relationship with Services model
  favorited_by      User      @relation(fields: [user_id], references: [id]) // One-to-One relationship with User model

  @@id([user_id, service_id])
}

// This is a junction model represents the favorite creators.
model Favorite_Creators {
  user_id            String
  content_creator_id String
  created_at         DateTime?       @default(now()) @db.Timestamp(6)
  updated_at         DateTime        @default(now()) @db.Timestamp(6)
  content_creator    ContentCreators @relation(fields: [content_creator_id], references: [id]) // One-to-One relationship with ContentCreators model
  user               User            @relation(fields: [user_id], references: [id]) // One-to-One relationship with User model

  @@id([user_id, content_creator_id])
}

model ContentCreators {
  id                 String                @id @default(cuid())
  name               String                @unique
  description        String                @default("")
  category           String
  tags               String
  creator_manager_id String
  created_at         DateTime?             @default(now()) @db.Timestamp(6)
  updated_at         DateTime              @default(now()) @db.Timestamp(6)
  creator_manager    User                  @relation(fields: [creator_manager_id], references: [id]) // One-to-One relationship with User model
  favorite_creators  Favorite_Creators[] // One-to-Many relationship with Favorite_Creators model
  creator_tags       ContentCreatorsTags[] // One-to-Many relationship with ContentCreatorsTags model

  @@index([creator_manager_id], map: "ContentCreators_creator_manager_id_fkey")
}

model Offers {
  id          String    @id @default(uuid())
  service_id  String
  price       Decimal
  duration    Int
  description String
  status      String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  service     Services  @relation(fields: [service_id], references: [id]) // One-to-Many relationship with Services model

  @@index([service_id], map: "Offers_service_id_fkey")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade) // One-to-One relationship with User model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique 
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // One-to-One relationship with User model

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// This model represents the users.
// It has relationships with the Account, Favorite_Creators, Favorite_Services, Services, and Session models.

enum Role {
  USER
  ADMIN
  CONTENT_CREATOR_MANAGER
  SERVICE_OWNER
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  email                  String?             @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  role                   String              @default("USER")
  Account                Account[] // One-to-Many relationship with Account model
  favorite_creators      Favorite_Creators[] // One-to-Many relationship with Favorite_Creators model
  favorite_services      Favorite_Services[] // One-to-Many relationship with Favorite_Services model
  owned_services         Services[] // One-to-Many relationship with Services model
  Session                Session[] // One-to-Many relationship with Session model
  owned_content_creators ContentCreators[] // One-to-Many relationship with ContentCreators model

  @@map("users")
}

// This model represents the verification tokens.
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
